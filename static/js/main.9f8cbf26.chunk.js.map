{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["App","useState","searchTerm","setSearchTerm","items","books","setBooks","fetchBooks","a","axios","get","result","data","onSubmit","e","preventDefault","className","type","placeholder","value","onChange","target","map","book","index","alt","volumeInfo","title","src","id","authors","publishedDate","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gPAAe,I,4BC8EAA,MAxEf,WACA,MAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACE,EAA0BF,mBAAS,CAAEG,MAAO,KAA5C,mBAAOC,EAAP,KAAcC,EAAd,KAOMC,EAAU,uCAAG,4BAAAC,EAAA,sEACIC,IAAMC,IAAN,UAHZ,8CAGY,cAA0BR,IAD9B,OACXS,EADW,OAEjBL,EAASK,EAAOC,MAFC,2CAAH,qDAsBhB,OACE,oCACE,uBAAMC,SAnBc,SAAAC,GACtBA,EAAEC,iBACFR,KAiBE,UACC,mDAEC,sBAAKS,UAAU,WAAf,eAA4B,uBACxBC,KAAK,SAASD,UAAU,eACxBE,YAAY,mBACZC,MAAOjB,EACPkB,SArCY,SAAAN,GACpBX,EAAcW,EAAEO,OAAOF,UAgCnB,WAME,wBAAQH,UAAU,WAAWC,KAAK,SAAlC,0BAIJ,oBAAID,UAAU,aAAd,SACGX,EAAMD,MAAMkB,KAAI,SAACC,EAAMC,GACtB,OACE,+BACE,gCACE,qBACEC,IAAG,UAAKF,EAAKG,WAAWC,MAArB,SACHC,IAAG,mDACDL,EAAKM,GADJ,sDAIL,gCACE,yCAAYN,EAAKG,WAAWC,SAC5B,yCAAwBJ,EAAKG,WAAWI,WACxC,iDAAoBP,EAAKG,WAAWK,uBAGxC,yBAdQP,YC3CPQ,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.9f8cbf26.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\r\nimport './App.css';\r\nimport React, { useState } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport axios from \"axios\";\r\n\r\nfunction App() {\r\nconst [searchTerm, setSearchTerm] = useState(\"\");\r\n  const [books, setBooks] = useState({ items: [] });\r\n  const onInputChange = e => {\r\n    setSearchTerm(e.target.value);\r\n  };\r\n\r\n  let API_URL = `https://www.googleapis.com/books/v1/volumes`;\r\n\r\n  const fetchBooks = async () => {\r\n    const result = await axios.get(`${API_URL}?q=${searchTerm}`);\r\n    setBooks(result.data);\r\n  };\r\n\r\n  const onSubmitHandler = e => {\r\n    e.preventDefault();\r\n    fetchBooks();\r\n  };\r\n\r\n  const bookAuthors = authors => {\r\n    /*if (authors.length <= 2) {\r\n      authors = authors.join(\" and \");\r\n    } else if (authors.length > 2) {\r\n      let lastAuthor = \" and \" + authors.slice(-1);\r\n      authors.pop();\r\n      authors = authors.join(\", \");\r\n      authors += lastAuthor;\r\n    }\r\n*/    return authors;\r\n  };\r\n\r\n  return (\r\n    <section >\r\n      <form onSubmit={onSubmitHandler}>\r\n       <h2> Book Search Tool</h2>\r\n          \r\n        <div className=\"book-div\">  <input\r\n            type=\"search\" className=\"search-input\"\r\n            placeholder=\"Search for books\"\r\n            value={searchTerm}\r\n            onChange={onInputChange}\r\n          />&nbsp;&nbsp;\r\n          <button className=\"btn_book\" type=\"submit\">Search</button>\r\n      </div>\r\n       \r\n      </form>\r\n      <ul className=\"book-items\">\r\n        {books.items.map((book, index) => {\r\n          return (\r\n            <li  key={index}>\r\n              <div>\r\n                <img\r\n                  alt={`${book.volumeInfo.title} book`}\r\n                  src={`http://books.google.com/books/content?id=${\r\n                    book.id\r\n                  }&printsec=frontcover&img=1&zoom=1&source=gbs_api`}\r\n                />\r\n                <div>\r\n                  <h3>Title: {book.volumeInfo.title}</h3>\r\n                  <p>Author: {bookAuthors(book.volumeInfo.authors)}</p>\r\n                  <p>Published Date: {book.volumeInfo.publishedDate}</p>\r\n                </div>\r\n              </div>\r\n              <hr />\r\n            </li>\r\n          );\r\n        })}\r\n      </ul>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport axios from \"axios\";\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}